# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17TKNxSfkVB_b_1gODGWBmjgFgdiptobb
"""



import json
import os
import random
from sentence_transformers import SentenceTransformer, InputExample, losses, models
from torch.utils.data import DataLoader
import os
os.environ["WANDB_DISABLED"] = "true"  #  Disable wandb logging

# Load your clarification question dataset
def load_clarification_data(json_path):
    with open(json_path, 'r', encoding='utf-8') as f:
        return json.load(f)

# Generate training pairs from the intent-wise grouped data
def create_training_pairs(data, num_negatives=1):
    examples = []

    all_intents = list(data.keys())
    for intent in all_intents:
        questions = data[intent]
        for i in range(len(questions)):
            for j in range(i + 1, len(questions)):
                # Positive pair (same intent)
                examples.append(InputExample(texts=[questions[i], questions[j]], label=1.0))

                # Negative pair (different intent)
                for _ in range(num_negatives):
                    neg_intent = random.choice([x for x in all_intents if x != intent])
                    neg_q = random.choice(data[neg_intent])
                    examples.append(InputExample(texts=[questions[i], neg_q], label=0.0))

    return examples

# SBERT fine-tuning
def fine_tune_sbert(train_data, output_path, batch_size=16, num_epochs=4):
    model = SentenceTransformer('all-MiniLM-L6-v2')

    train_dataloader = DataLoader(train_data, shuffle=True, batch_size=batch_size)
    train_loss = losses.CosineSimilarityLoss(model)

    model.fit(
        train_objectives=[(train_dataloader, train_loss)],
        epochs=num_epochs,
        warmup_steps=100
    )

    model.save(output_path)
    print(f" Model saved to {output_path}")

# Set paths
json_path = "/content/drive/MyDrive/intent_classifier/data/clarification_question_model/clarifying_questions_main.json"
model_save_path = "/content/drive/MyDrive/intent_classifier/data/clarification_question_model/clarification_sbert_model"

# Load and train
print("ðŸ“‚ Loading clarification dataset...")
data = load_clarification_data(json_path)

print("ðŸ”§ Creating training pairs...")
train_data = create_training_pairs(data)

print("ðŸš€ Fine-tuning SBERT...")
fine_tune_sbert(train_data, output_path=model_save_path)